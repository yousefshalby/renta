# Generated by Django 2.2.16 on 2023-01-03 23:51

from django.db import migrations, models
import django.utils.timezone
import project.custom_Models
import project.model_mixin
import project.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='AboutUs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_paragraph_title', models.CharField(default='', help_text='title of first paragraph in about us page', max_length=50)),
                ('first_paragraph_text', models.TextField(default='', help_text='description of first paragraph in about us page', max_length=1000)),
                ('second_paragraph_title', models.CharField(default='', help_text='title of second paragraph in about us page', max_length=50)),
                ('second_paragraph_text', models.TextField(default='', help_text='description of second paragraph in about us page', max_length=1000)),
                ('third_paragraph_title', models.CharField(default='', help_text='title of third paragraph in about us page', max_length=50)),
                ('third_paragraph_text', models.TextField(default='', help_text='description of third paragraph in about us page', max_length=1000)),
                ('forth_paragraph_title', models.CharField(default='', help_text='title of forth paragraph in about us page', max_length=50)),
                ('forth_paragraph_text', models.TextField(default='', help_text='description of forth paragraph in about us page', max_length=1000)),
            ],
            options={
                'verbose_name': 'About Us',
            },
        ),
        migrations.CreateModel(
            name='ContactInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=255)),
                ('contact_no', models.CharField(max_length=12)),
                ('find_us', models.CharField(max_length=250)),
            ],
            options={
                'verbose_name': 'Contact Information',
            },
        ),
        migrations.CreateModel(
            name='ContactUs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=255)),
                ('phone_number', models.CharField(max_length=12)),
            ],
            options={
                'verbose_name': 'Contact us',
                'verbose_name_plural': 'Contact Us',
            },
            bases=(project.model_mixin.ContactUsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Properties',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=500, null=True)),
                ('address', models.CharField(blank=True, max_length=500, null=True)),
                ('description', models.TextField(blank=True, default='', help_text='description of property', max_length=1000, null=True)),
                ('area', models.CharField(blank=True, max_length=500, null=True)),
                ('Bedrooms', models.PositiveIntegerField(blank=True, null=True)),
                ('Bathrooms', models.PositiveIntegerField(blank=True, null=True)),
                ('listing_date', models.CharField(blank=True, max_length=500, null=True)),
                ('price', models.CharField(blank=True, max_length=500, null=True)),
                ('phone', models.CharField(blank=True, max_length=500, null=True)),
                ('property_type', models.CharField(blank=True, max_length=500, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, null=True, unique=True, verbose_name='email address')),
                ('username', models.CharField(blank=True, max_length=150, null=True, verbose_name='username')),
                ('phone', models.CharField(max_length=50, null=True, unique=True, verbose_name='Phone')),
                ('gender', models.CharField(blank=True, choices=[('male', 'male'), ('female', 'female')], max_length=50, null=True, verbose_name='Gender')),
                ('address', models.TextField(blank=True, max_length=255, null=True, verbose_name='Address')),
                ('is_active', models.BooleanField(default=False)),
                ('is_app_user', models.BooleanField(default=False)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('password_reset_code', models.CharField(blank=True, max_length=10, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=(project.custom_Models.CustomModel, models.Model),
            managers=[
                ('objects', project.models.CustomUserManager()),
            ],
        ),
    ]
